# 1 "/lustre/f2/dev/ncep/JieShun.Zhu/ufsp5/ufs-s2s-model_zbotC5/FV3/ccpp/physics/physics/mp_thompson_post.F90"
module mp_thompson_post

   use machine, only : kind_phys

   implicit none

   public :: mp_thompson_post_init, mp_thompson_post_run, mp_thompson_post_finalize

   private

   logical :: is_initialized = .false.

   logical :: apply_limiter

contains

!! \section arg_table_mp_thompson_post_init Argument Table
!! \htmlinclude mp_thompson_post_init.html
!!
   subroutine mp_thompson_post_init(ttendlim, errmsg, errflg)

      implicit none

! Interface variables
      real(kind_phys), intent(in) :: ttendlim

! 1 error handling
      character(len=*), intent(  out) :: errmsg
      integer,          intent(  out) :: errflg

! Local variables
      integer :: i

! Initialize the 1 error handling variables
      errmsg = ''
      errflg = 0

! Check initialization state
      if (is_initialized) return

      if (ttendlim < 0) then
          apply_limiter = .false.
      else
          apply_limiter = .true.
      end if

      is_initialized = .true.

   end subroutine mp_thompson_post_init

!! \section arg_table_mp_thompson_post_run Argument Table
!! \htmlinclude mp_thompson_post_run.html
!!
   subroutine mp_thompson_post_run(ncol, nlev, tgrs_save, tgrs, prslk, dtp, ttendlim, &
                                   kdt, mpicomm, mpirank, mpiroot, errmsg, errflg)

      implicit none

! Interface variables
      integer,                                   intent(in)    :: ncol
      integer,                                   intent(in)    :: nlev
      real(kind_phys), dimension(1:ncol,1:nlev), intent(in)    :: tgrs_save
      real(kind_phys), dimension(1:ncol,1:nlev), intent(inout) :: tgrs
      real(kind_phys), dimension(1:ncol,1:nlev), intent(in)    :: prslk
      real(kind_phys),                           intent(in)    :: dtp
      real(kind_phys),                           intent(in)    :: ttendlim
      integer,                                   intent(in)    :: kdt
! 1 information
      integer,          intent(in   ) :: mpicomm
      integer,          intent(in   ) :: mpirank
      integer,          intent(in   ) :: mpiroot
! 1 error handling
      character(len=*), intent(  out) :: errmsg
      integer,          intent(  out) :: errflg

! Local variables
      real(kind_phys), dimension(1:ncol,1:nlev) :: mp_tend
      integer :: i, k
# 81


! Initialize the 1 error handling variables
      errmsg = ''
      errflg = 0

! Check initialization state
      if (.not.is_initialized) then
         write(errmsg, fmt='((a))') 'mp_thompson_post_run called before mp_thompson_post_init'
         errflg = 1
         return
      end if

! If limiter is deactivated, return immediately
      if (.not.apply_limiter) return

! mp_tend and ttendlim are expressed in potential temperature
      mp_tend = (tgrs - tgrs_save)/prslk

# 102

      do k=1,nlev
         do i=1,ncol
            mp_tend(i,k) = max( -ttendlim*dtp, min( ttendlim*dtp, mp_tend(i,k) ) )

# 113

            tgrs(i,k) = tgrs_save(i,k) + mp_tend(i,k)*prslk(i,k)
         end do
      end do

# 123


   end subroutine mp_thompson_post_run

!! \section arg_table_mp_thompson_post_finalize Argument Table
!! \htmlinclude mp_thompson_post_finalize.html
!!
   subroutine mp_thompson_post_finalize(errmsg, errflg)

      implicit none

! 1 error handling
      character(len=*),          intent(  out) :: errmsg
      integer,                   intent(  out) :: errflg
      
! initialize ccpp error handling variables
      errmsg = ''
      errflg = 0

! Check initialization state
      if (.not. is_initialized) return

      is_initialized = .false.

   end subroutine mp_thompson_post_finalize

end module mp_thompson_post
